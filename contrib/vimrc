"
" Note:
"   For Windows:
"     1. rename .vimrc to _vimrc
"     2. rename .vim/ to vimfiles/
"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Get out of VI's compatible mode..
set nocompatible

" Sets how many lines of history VIM have to remember
set history=200

" Set to auto read when a file is changed from the outside
set autoread

" Set map leader
let mapleader = ","
let g:mapleader = ","

" See partial commands as you type
set showcmd

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Encoding & Language
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use UTF-8 as default processing enc.
set encoding=utf-8

" File default encoding
set fileencoding=utf-8

" File encoding guess list
set fileencodings=utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1

" Terminal encoding
set termencoding=utf-8

" Treat ambiguous width as double width (ONLY work for unicode encoding)
set ambiwidth=double

if has("win32") || has("win64")
    " Set language (I like to use English)
    language english
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fileformats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Favorite file types
set fileformats=unix,dos,mac

nmap <LEADER>fd :set fileformat=dos<CR>
nmap <LEADER>fu :set fileformat=unix<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileType
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable file type plug-in
filetype plugin on
filetype indent on

autocmd! BufNewFile,BufRead *.conf set filetype=config

" tmux
autocmd! BufNewFile,BufRead *.tmux.conf*,*tmux.conf* set filetype=tmux

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keep at least 5 lines above/below
set scrolloff=5

" Keep at least 5 lines left/right
set sidescrolloff=5

" Turn on wild menu
set wildmenu

" Always show current position
set ruler

" The command bar is 2 high
set cmdheight=2

" Show line number
set number

" Do not redraw while running macros (much faster) (LazyRedraw)
set lazyredraw

" Fast terminal
set ttyfast

" Change buffer without saving
set hidden

" Set backspace
set backspace=start,indent,eol

" Backspace and cursor keys wrap to
set whichwrap+=<,>,h,l

" Set magic on
set magic

" No sound on errors.
set noerrorbells
set novisualbell
set t_vb=

" Show matching braces
set showmatch

" Show full completion tags
set showfulltag

" How many tenths of a second to blink (Bracket blinking)
set mat=2

" Windows size
if has("gui_running")
    set columns=120
    set lines=60
endif

" Enable syntax highlighting
syntax enable

    """"""""""""""""""""""""""""""
    " Colors and Fonts
    """"""""""""""""""""""""""""""
    if has("gui_running")
        if has("win32") || has("win64")
            set guifont=Monaco:h10
        elseif has("mac") || has("macunix")
            set guifont=Monaco:h14
        endif

        set guioptions-=T
        set background=dark
        colorscheme ir_black

        if has("gui_macvim")
            set transparency=10
        endif
    else
        if &term == "xterm-color" || &term == "xterm-16color"
            " Set the color level
            set t_Co=16
            colorscheme yzlin
        else
            " Set the color level
            set t_Co=256
            colorscheme yzlin256
        endif
    endif

    """"""""""""""""""""""""""""""
    " Cursor line
    """"""""""""""""""""""""""""""
    " Highlight current line in Insert Mode
    function! s:EnterInsert()
        set cursorline
    endfunction

    function! s:LeaveInsert()
        set nocursorline
    endfunction

    autocmd InsertLeave * call s:LeaveInsert()
    autocmd InsertEnter * call s:EnterInsert()

    """"""""""""""""""""""""""""""
    " Status line
    """"""""""""""""""""""""""""""
    " Always hide the status line
    set laststatus=2

    set statusline=%<%f%<%h%m%r\ \ %(\*%Y\*\ \ LineNr=%l\/%L\ \ Col=%03c%)\ \ \%P\*
    set rulerformat=%15(%c%V\ %p%%%)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore case when searching
set ignorecase

" Incremental search
set incsearch

" Highlight search things
set hlsearch

" Make search wrap around
set wrapscan

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Moving around and tabs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tab configuration
nmap <LEADER>tc :tabnew<CR>
nmap <LEADER>te :tabedit<SPACE>
nmap <LEADER>tm :tabmove<SPACE>
nmap <LEADER>tk :tabclose<CR>
nmap <C-H> :tabprev<CR>
nmap <C-L> :tabnext<CR>
" For tmux
nmap <C-?> :tabprev<CR>

" Last used tab switching
autocmd TabLeave * let g:LastUsedTabPage = tabpagenr()
function! SwitchLastUsedTab()
    if exists("g:LastUsedTabPage")
        execute "tabnext " g:LastUsedTabPage
    endif
endfunction
nmap tt :call SwitchLastUsedTab()<CR>

" Fast tab moving
for i in range(0, 9)
    execute "nmap <ESC>" . i . " :tabnext " . (i + 1) . "<CR>"
endfor

set switchbuf=usetab

" Always show tab line
set showtabline=2

" Tab line format
function! TabLine()
    let s = ''
    for i in range(1, tabpagenr('$'))
        let hiBG = ((i == tabpagenr()) ? '%#TabLineSel#' : '%#TabLine#')
        let winnr = tabpagewinnr(i, '$')
        "let filename = bufname(tabpagebuflist(i)[winnr - 1])
        let filename = bufname(tabpagebuflist(i)[0])
        if (filename == 'NERD_Tree_1')
            let filename = bufname(tabpagebuflist(i)[1])
        endif
        if (filename == '')
            let filename = '=No Name='
        endif
        let s .= hiBG . ' '
        if (winnr > 1)
            let s .= '[' . (i - 1). '-' . winnr . '] '
        else
            let s .= '[' . (i - 1) . '] '
        endif
        "let s .= substitute(filename, '.\+\/', '', 'g')
        let s .= filename
        let s .= (1 == gettabwinvar(i, 1, '&modified') ? '[+]' : '')
        let s .= ' '
        let i += 1
    exe | endfor
    let s .= '%#TabLineFill#'
    return s
endfunction

" Only when no GUI
if !has("gui_running")
    " Customized tabline
    set tabline=%!TabLine()

    if &term == "xterm-color" || &term == "xterm-16color"
        hi TabLine      cterm=NONE      ctermfg=grey      ctermbg=darkgrey
        hi TabLineFill  cterm=NONE      ctermfg=grey      ctermbg=darkgrey
        hi TabLineSel   cterm=NONE      ctermfg=grey      ctermbg=blue
    else
        hi TabLine      cterm=NONE      ctermfg=fg      ctermbg=236
        hi TabLineFill  cterm=NONE      ctermfg=fg      ctermbg=236
        hi TabLineSel   cterm=NONE      ctermfg=fg      ctermbg=64
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Comment for C like languages
autocmd BufNewFile,BufRead *.js,*.htc,*.c,*.tmpl,*.css inoremap $c /**<CR>  **/<ESC>O

" Bash like
cnoremap <C-B> <HOME>
cnoremap <C-E> <END>
cnoremap <C-K> <C-U>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files and backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off
set nobackup

set nowritebackup
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable folding
set foldenable
set foldmethod=syntax

" Set a high foldlevel to default open all folds
set foldlevel=200

" 3 lines of column for fold showing, always
set foldcolumn=3

" Easily open and close folds
nnoremap <SPACE> za

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab
set shiftwidth=4
set softtabstop=8
set tabstop=8
set backspace=2
set smarttab
set linebreak
set textwidth=600

    """"""""""""""""""""""""""""""
    " Indent
    """"""""""""""""""""""""""""""
    " Auto indent
    set autoindent

    " Smart indent
    set smartindent

    " C-style indenting
    set cindent

    " Wrap lines
    set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickfix window
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bang -nargs=? QFix call QFixToggle(<bang>0)

function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced == 0
        cclose
        unlet g:qfix_win
    else
        copen 10
        let g:qfix_win = bufnr("$")
    endif
endfunction

nnoremap <LEADER>q :QFix<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug-in configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""
    " Taglist
    """"""""""""""""""""""""""""""
    " 自動更新目前的 tag 列表
    let Tlist_Auto_Update = 1

    " 顯示的 tag 排序方式：name/order
    let Tlist_Sort_Type = "name"

    " Tlist 視窗的寬度
    let Tlist_WinWidth = 50

    " 是否只顯示目前文件的 tag
    let Tlist_Show_One_File = 0

    " 關閉文件的同時，也關閉taglist視窗
    let Tlist_Exit_OnlyWindow = 1

    let Tlist_Use_SingleClick = 1

    " Tlist window at the right side
    let Tlist_Use_Right_Window = 1

    " Automatically close the folds for the non-active files
    let Tlist_File_Fold_Auto_Close = 1

    " Process files even when the taglist window is not open
    let Tlist_Process_File_Always = 1

    " Enable fold column to display the folding for the tag tree
    let Tlist_Enable_Fold_Column = 0

    " hot key
    nnoremap <F3> :TlistToggle<CR>

    """"""""""""""""""""""""""""""
    " Cscope
    """"""""""""""""""""""""""""""
    if has("cscope")
        "set csprg=/usr/local/bin/cscope
        set cscopetagorder=0
        set cscopetag
        set cscopeverbose
        set cscopetag
        "set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-

        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
    endif

    """"""""""""""""""""""""""""""
    " OmniCppComplete
    """"""""""""""""""""""""""""""
    map <F6> :!exctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

    """"""""""""""""""""""""""""""
    " YankRing
    """"""""""""""""""""""""""""""
    let g:yankring_history_dir = "$HOME/.vim/temp/"

    """"""""""""""""""""""""""""""
    " SmoothPageScroll
    """"""""""""""""""""""""""""""
    "if !has("gui_running")
    "    let g:smooth_page_scroll_delay = 2
    "    nmap <C-F> :call SmoothPageScrollDown()<CR>
    "    nmap <C-B> :call SmoothPageScrollUp()<CR>
    "endif

    """"""""""""""""""""""""""""""
    " Ku
    """"""""""""""""""""""""""""""
    nnoremap <Leader>kb :<C-u>Ku buffer<Return>
    nnoremap <Leader>kf :<C-u>Ku file<Return>

    """"""""""""""""""""""""""""""
    " CSApprox.vim
    """"""""""""""""""""""""""""""
    let g:CSApprox_verbose_level = 0

    """"""""""""""""""""""""""""""
    " CompView
    """"""""""""""""""""""""""""""
    map <unique> <Leader>/ <Plug>CompView

    """"""""""""""""""""""""""""""
    " zendcoding
    """"""""""""""""""""""""""""""
    let g:user_zen_expandabbr_key = '<C-k>'
    let g:use_zen_complete_tag = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M
noremap <LEADER>m mmHmt:%s/<C-V><CR>//ge<CR>'tzt'm

" Remove indenting on empty lines
noremap <F2> :%s/\s*$//g<CR>:noh<CR>''

" Super paste
"inoremap <C-V> <ESC>:set paste<CR>mui<C-R>+<ESC>mv'uV'v=:set nopaste<CR>

" Visual Tab
set listchars=tab:>-,trail:-,eol:$,nbsp:%,extends:>,precedes:<

" Fast Big5 Mode
noremap <LEADER>b :e ++enc=big5<CR>:set tenc=big5<CR>:set fenc=big5<CR>

" When editing a file, always jump to the last known cursor position.
" Don’t do it when the position is invalid or when inside an event handle
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute "normal g`\"" |
    \ endif

" Quick window resize
nnoremap + <C-W>+
nnoremap - <C-W>-
nnoremap = <C-W>=

" Bind number increment (Screen use it!!)
noremap <C-E> <C-A>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Group setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" C/C++
augroup cplusplus
    autocmd!
    function! _cplusplus()
        set shiftwidth=8
        set softtabstop=8
        set tabstop=8
        set noexpandtab

        " None of these should be word dividers, so make them not be
        set iskeyword+=_,@,#

        " Line wrapping in c comments not c code
        "set textwidth=78

        if has("gui_running")
            hi Error80        gui=NONE guifg=#ffffff guibg=#6e2e2e
            hi ErrorLeadSpace gui=NONE guifg=#ffffff guibg=#6e2e2e
            hi ErrorTailSpace gui=NONE guifg=#ffffff guibg=#6e2e2e
        else
            hi Error80        cterm=NONE ctermfg=79 ctermbg=32
            hi ErrorLeadSpace cterm=NONE ctermfg=79 ctermbg=33
            hi ErrorTailSpace cterm=NONE ctermfg=79 ctermbg=33
        endif

        syntax match ErrorLeadSpace /^ \+/      " highlight any leading spaces
        syntax match ErrorTailSpace / \+$/      " highlight any trailing spaces
        "match Error80               /\%>80v.\+/ " highlight anything past 80 in red

        " Support more C-related types
        syntax keyword cType uint ubyte ulong uint64_t uint32_t uint16_t uint8_t boolean_t int64_t int32_t int16_t int8_t u_int64_t u_int32_t u_int16_t u_int8_t
        syn keyword cOperator likely unlikely

        " C-mode formatting options
        "   t auto-wrap comment
        "   c allows textwidth to work on comments
        "   q allows use of gq* for auto formatting
        "   l don't break long lines in insert mode
        "   r insert '*' on <cr>
        "   o insert '*' on newline with 'o'
        "   n recognize numbered bullets in comments
        set formatoptions=tcqlron

        " C-mode options (cinoptions==cino)
        " N     number of spaces
        " Ns    number of spaces * shiftwidth
        " >N    default indent
        " eN    extra indent if the { is at the end of a line
        " nN    extra indent if there is no {} block
        " fN    indent of the { of a function block
        " gN    indent of the C++ class scope declarations (public, private, protected)
        " {N    indent of a { on a new line after an if,while,for...
        " }N    indent of a } in reference to a {
        " ^N    extra indent inside a function {}
        " :N    indent of case labels
        " =N    indent of case body
        " lN    align case {} on the case line
        " tN    indent of function return type
        " +N    indent continued algibreic expressions
        " cN    indent of comment line after /*
        " )N    vim searches for closing )'s at most N lines away
        " *N    vim searches for closing */ at most N lines away
        set cinoptions=:0l1t0g0

        " folding
        "  - reserve 4 columns on the left for folding tree
        "  - fold by syntax, use {}'s
        "  - start with all folds open

        " cool C abbreviations...
        abbreviate #i #include
        abbreviate #d #define

        "highlight OverLength ctermbg=red ctermfg=white guibg=#592929
        "match OverLength /\%81v.\+/

    endfunction
    autocmd FileType c,cpp call _cplusplus()
    autocmd BufEnter *.c,*.h,*.cpp,*.hpp,*.cc call _cplusplus()
augroup END

function! OpenPythonQuickfix()
    TlistToggle
    let winnum = winnr()
    make
    botright copen
    try
        cfirst
    catch /E42:/
        set modifiable
        call setline('.', 'No Errors')
        set nomodifiable
        set nomodified
        execute winnum . 'wincmd w'
    endtry
    TlistToggle
    redraw!
endfunction

function! NextPythonQuickfix()
    try
        cnext
    catch /E42:/
        cclose
    catch /E553:/
        cclose
    endtry
endfunction

" Python
augroup python
    autocmd!
    function! _python()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
        set expandtab
        "set tags+=$HOME/.vim/tags/python

        " syntax/python.vim
        let python_highlight_all = 1
        set foldmethod=indent
        set foldnestmax=4
        set makeprg=pylint\ --reports=n\ --output-format=parseable\ %:p\ \\\|\ grep\ -v\ -e\ \"^No\ config\ file\"
        set efm=%A%f:%l:\ [%t%.%#]\ %m,%Z%p^^,%-C%.%#

        nnoremap <LEADER>ls :set list<CR>
        nnoremap <LEADER>ns :set nolist<CR>
        nnoremap <F2> :%s/\s*$//g<CR>:noh<CR>''
        nnoremap <F3> :silent call OpenPythonQuickfix()<CR>
        nnoremap <F4> :call NextPythonQuickfix()<CR>
	"TlistToggle

        highlight CursorLine cterm=NONE ctermbg=240
        highlight OverLength ctermbg=red ctermfg=white
        match OverLength /\%81v.\+/
    endfunction
    autocmd FileType python call _python()
augroup END

augroup make
    autocmd!
    function! _make()
	set foldmethod=indent
    endfunction
    autocmd FileType make call _make()
augroup END

" Perl
augroup perl
    autocmd!
    function! _perl()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
        set expandtab

        " indent by perltidy
        if executable("/usr/local/bin/perltidy")
            set equalprg=perltidy
        endif
    endfunction
    autocmd FileType perl call _perl()
augroup END

" PHP
" Highlight SQL syntax in string
let php_sql_query=1

" Highlight HTML in string
let php_htmlInStrings=1

" Disable short tags
let php_noShortTags=1

" Folding for classes & functions
let php_folding=1
augroup php
    autocmd!
    function! _php()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
        set makeprg=php\ -l\ %
        set errorformat=%m\ in\ %f\ on\ line\ %l

        " None of these should be word dividers, so make them not be
        set iskeyword+=_,@,#

        nmap <silent> <F12>
            \ :!exctags -f %:p:h/tags
            \ --langmap="php:+.inc"
            \ -h ".php.inc" -R --totals=yes
            \ --tag-relative=yes --PHP-kinds=+cf-v %:p:h<CR>
    endfunction
    autocmd FileType php call _php()
augroup END

" shell script
augroup sh
    autocmd!
    function! _sh()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
    endfunction
    autocmd FileType sh call _sh()
augroup END

" quick fix
augroup qf
    autocmd!
    function! _qf()
        set nonumber
        set noruler
        set cursorline
        setlocal syntax=off
    endfunction
    autocmd FileType qf call _qf()
augroup END

function! TBS_Start()
    if exists('t:TBS_opened') && t:TBS_opened == 1
	let t:TBS_opened = 0
	wincmd l
	close
	autocmd! CursorMoved <buffer>
    else
	let t:TBS_opened = 1
	60vnew
	wincmd r
	set nonu
	set nowrap
	set nomodified
	set sidescrolloff=0
	wincmd h
	call TBS()
	autocmd CursorMoved <buffer> call TBS()
    endif
endfunction

function! TBS()
    redir => l:regs
	silent registers
    redir END
    redir => l:marks
	silent marks
    redir END

    wincmd l
    normal ggdG
    let l:lineno = 1
    for l:line in split(l:regs, '\n')
	if match(l:line, '^"[a-zA-Z]') != -1 || match(l:line, '^---') != -1
	    call setline(l:lineno, l:line)
	    let l:lineno = l:lineno + 1
	endif
    endfor
    call setline(l:lineno, '')
    let l:lineno = l:lineno + 1
    call setline(l:lineno, '--- Marks ---')
    let l:lineno = l:lineno + 1
    for l:line in split(l:marks, '\n')
	if match(l:line, '^.[a-z]') != -1
	    call setline(l:lineno, l:line)
	    let l:lineno = l:lineno + 1
	endif
    endfor
    set nomodified
    wincmd h
endfunction

nnoremap <F5> :call TBS_Start()<CR>
nnoremap <F6> :call TBS()<CR>
